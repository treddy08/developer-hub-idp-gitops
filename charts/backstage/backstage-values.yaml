#helm repo add backstage https://janus-idp.github.io/helm-backstage
#helm repo update
#oc project backstage
#helm install backstage backstage/backstage --values values.yaml
global:
  auth:
    backend:
      enabled: true
  clusterRouterBase: {{ ocp4_workload_redhat_developer_hub_apps_domain }}
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-community-plugin-redhat-argocd
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-tekton
        pluginConfig:
          dynamicPlugins:
            frontend:
              backstage-community.plugin-tekton:
                mountPoints:
                  - mountPoint: entity.page.ci/cards
                    importName: TektonCI
                    config:
                      layout:
                        gridColumn: "1 / -1"
                        gridRowStart: 1
                      if:
                        allOf:
                          - isTektonCIAvailable
        disabled: false
      - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab
        disabled: false
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-gitlab-dynamic
      - package: ./dynamic-plugins/dist/backstage-community-plugin-quay
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
        disabled: false
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-community-plugin-topology
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-techdocs
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-community-plugin-catalog-backend-module-keycloak-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-community-plugin-ocm
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-community-plugin-ocm-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-community-plugin-tech-radar
      - disabled: false
        integrity: sha512-9cXbedr0lC7ns7SNqARrWSQI4JGcZFw5xpfpUzA1tJaMMUjzAdPHTXqljf62/fs4hYBK8TJsWJ2KJkGVMzbrHQ==
        package: '@redhat/backstage-plugin-orchestrator-backend-dynamic@1.7.1'
        dependencies:
        - ref: sonataflow
      - disabled: false
        integrity: sha512-Cqu9EQwVQ4mpdgWTUA0MW89Gul0IklhvkkqVoO3CloQ1dnAj1XyXikCphzH5TmNDDd9K66dOpaKKCaW9KeJ4WA==
        package: '@redhat/backstage-plugin-orchestrator@1.7.1'
        pluginConfig:
          dynamicPlugins:
            frontend:
              red-hat-developer-hub.backstage-plugin-orchestrator:
                appIcons:
                - importName: OrchestratorIcon
                  name: orchestratorIcon
                dynamicRoutes:
                - importName: OrchestratorPage
                  menuItem:
                    icon: orchestratorIcon
                    text: Orchestrator
                  path: /orchestrator
      - disabled: false
        integrity: sha512-J1sTjA5kj6DphG8D65go9KlpIfKyLN/wq+XlY5Cb5djEo8mvF3wn3Haf60OGFo5cP4OfRSWqFwT7LM5/dNVwAg==
        package: '@redhat/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic@1.7.1'
        pluginConfig:
          orchestrator:
            dataIndexService:
              url: http://sonataflow-platform-data-index-service
      - disabled: false
        integrity: sha512-0KIXrZoJ+O4xNNzN/zB4+VMuaRPuiUviAmM+fIhTo/P9aLA36F9aIlyMbUbki49uaJ0zd8KXMBvmJSHZNrYkGQ==
        package: '@redhat/backstage-plugin-orchestrator-form-widgets@1.7.1'
        pluginConfig:
          dynamicPlugins:
            frontend:
              red-hat-developer-hub.backstage-plugin-orchestrator-form-widgets: {}
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-notifications
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-signals
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-notifications-backend-dynamic
      - disabled: false
        package: ./dynamic-plugins/dist/backstage-plugin-signals-backend-dynamic

upstream:
  backstage:
    image:
      registry: {{ ocp4_workload_redhat_developer_hub_backstage_image_registry }}
      repository: {{ ocp4_workload_redhat_developer_hub_backstage_image_repository }}
      tag: '{{ ocp4_workload_redhat_developer_hub_backstage_image_tag }}'
      pullSecrets:
      - redhat-gpte-devhub-pull-secret
    extraEnvVars:
      - name: NODE_OPTIONS
        value: --no-node-snapshot
      - name: BACKEND_SECRET
        value: "{{ '{{ randAlphaNum 24 | b64enc }}' }}"
      # - name: POSTGRES_ADMIN_PASSWORD
      #   valueFrom:
      #     secretKeyRef:
      #       key: postgres-password
      #       name: backstage-postgresql
      - name: NODE_TLS_REJECT_UNAUTHORIZED
        value: "0"
      - name: KEYCLOAK_CLIENT_ID
        valueFrom:
          secretKeyRef:
            key: CLIENT_ID
            name: keycloak-client-secret-backstage
      - name: KEYCLOAK_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            key: CLIENT_SECRET
            name: keycloak-client-secret-backstage
      - name: LOG_LEVEL
        value: debug
    extraContainers:
      - name: oauth2-proxy
        env:
          - name: OAUTH2_PROXY_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: CLIENT_ID
                name: keycloak-client-secret-backstage
          - name: OAUTH2_PROXY_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: CLIENT_SECRET
                name: keycloak-client-secret-backstage
          - name: OAUTH2_PROXY_COOKIE_SECRET
            value: "{{ '{{ randAlpha 32 | lower | b64enc }}' }}"
          - name: OAUTH2_PROXY_OIDC_ISSUER_URL
            value: https://{{ ocp4_workload_redhat_developer_hub_keycloak_host }}/auth/realms/backstage
          - name: OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY
            value: 'true'
        ports:
          - name: oauth2-proxy
            containerPort: 4180
            protocol: TCP
        imagePullPolicy: IfNotPresent
        image: 'quay.io/oauth2-proxy/oauth2-proxy:latest'
        args:
          - '--provider=oidc'
          - '--email-domain=*'
          - '--upstream=http://localhost:7007'
          - '--http-address=0.0.0.0:4180'
          - '--skip-provider-button'
          - '--insecure-oidc-allow-unverified-email=true'

    appConfig:
      app:
        baseUrl: https://{{ ocp4_workload_redhat_developer_hub_backstage_host }}
      backend:
        baseUrl: https://{{ ocp4_workload_redhat_developer_hub_backstage_host }}
        auth:
          externalAccess:
          - type: static
            options:
              token: ${BACKEND_SECRET}
              subject: orchestrator
        listen:
          port: 7007
          host: 0.0.0.0
        csp:
          script-src: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
          script-src-elem: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
          img-src: ["'self'", 'data:']
          connect-src: ["'self'", 'http:', 'https:', 'data:']
        cors:
          origin: https://{{ ocp4_workload_redhat_developer_hub_backstage_host }}
          methods: [GET, POST, PUT, DELETE]
          credentials: true
        database:
          client: pg
          connection:
            host: "${POSTGRES_HOST}"
            port: "${POSTGRES_PORT}"
            user: "${POSTGRES_USER}"
            password: "${POSTGRES_ADMIN_PASSWORD}"
        reading:
          allow:
            - host: '*.{{ ocp4_workload_redhat_developer_hub_apps_domain }}'

      integrations:
        gitlab:
        - host: {{ ocp4_workload_redhat_developer_hub_gitlab_host }}
          baseUrl: https://{{ ocp4_workload_redhat_developer_hub_gitlab_host }}
          apiBaseUrl: https://{{ ocp4_workload_redhat_developer_hub_gitlab_host }}/api/v4
          token: {{ ocp4_workload_redhat_developer_hub_gitlab_root_token }}

      proxy:
        endpoints:
          '/quay/api':
            target: 'https://{{ ocp4_workload_redhat_developer_hub_quay_host }}'
            headers:
              X-Requested-With: 'XMLHttpRequest'
              # Uncomment the following line to access a private Quay Repository using a token
              Authorization: 'Bearer {{ ocp4_workload_redhat_developer_hub_quay_admin_token }}'
            changeOrigin: true
            # Change to "false" in case of using self hosted quay instance with a self-signed certificate
            secure: false
          '/developer-hub':
            target: https://{{ ocp4_workload_redhat_developer_hub_gitlab_host }}/
            pathRewrite:
              '^/api/proxy/developer-hub/tech-radar': /gitops/janus-idp-gitops/-/raw/main/config/tech-radar.json
            changeOrigin: true
            secure: false

      quay:
        # The UI url for Quay, used to generate the link to Quay
        uiUrl: 'https://{{ ocp4_workload_redhat_developer_hub_quay_host }}'

      techdocs:
        builder: local
        generator:
          runIn: local
        publisher:
          type: local

      auth:
        environment: production
        providers:
          oauth2Proxy: {}
        session:
          secret:
            $env: 'BACKEND_SECRET'

      signInPage: oauth2Proxy

      scaffolder:
        # see https://backstage.io/docs/features/software-templates/configuration for software template options

      catalog:
        rules:
          - allow: [Domain, Component, System, API, Resource, Location, Template]
        locations:
{% for location in ocp4_workload_redhat_developer_hub_gitlab_template_locations %}
          - target: https://{{ ocp4_workload_redhat_developer_hub_gitlab_host }}/{{ location.group }}/{{ location.project }}/blob/{{ location.branch }}/{{ location.file }}
            type: url
            rules:
              - allow: [{{ location.rules.allow }}]
{% endfor %}
        providers:
          gitlab:
            selfHosted:
              host: {{ ocp4_workload_redhat_developer_hub_gitlab_host }}
              schedule: # optional; same options as in TaskScheduleDefinition
                # supports cron, ISO duration, "human duration" as used in code
                frequency: { seconds: 10 }
                # supports ISO duration, "human duration" as used in code
                timeout: { seconds: 60 }
          ocm:
            default:
              name: multiclusterhub
              kubernetesPluginRef: dev-cluster-infra
              schedule: # optional; same options as in TaskScheduleDefinition
                # supports cron, ISO duration, "human duration" as used in code
                frequency: { seconds: 10 }
                # supports ISO duration, "human duration" as used in code
                timeout: { seconds: 60 }
              owner: group:rhdh
          keycloakOrg:
            default:
              baseUrl: {{ ocp4_workload_redhat_developer_hub_keycloak_host }}/auth
              loginRealm: backstage
              realm: backstage
              clientId: ${KEYCLOAK_CLIENT_ID}
              clientSecret: ${KEYCLOAK_CLIENT_SECRET}

      argocd:
        appLocatorMethods:
          - type: 'config'
            instances:
              - name: main
                url: 	https://{{ ocp4_workload_redhat_developer_hub_argocd_host }}
                username: admin
                password: {{ ocp4_workload_redhat_developer_hub_argocd_password }}

      kubernetes:
        serviceLocatorMethod:
          type: "multiTenant"
        clusterLocatorMethods:
          - type: "config"
            clusters:
              - name: dev-cluster-infra
                url: {{ ocp4_workload_redhat_developer_hub_ocp_api }}
                authProvider: "serviceAccount"
                skipTLSVerify: true
                serviceAccountToken: {{ ocp4_workload_redhat_developer_hub_ocp_default_sa_token }}
        customResources:
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'pipelineruns'
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'taskruns'
          - group: 'route.openshift.io'
            apiVersion: 'v1'
            plural: 'routes'

      permission:
        enabled: false

      enabled:
        kubernetes: true
        techdocs: true
        argocd: true
        sonarqube: false
        keycloak: true
        ocm: true
        github: false
        githubOrg: false
        gitlab: true
        jenkins: false
        permission: false

  # postgresql:
  #   enabled: true
  #   database: backstage
  #   postgresqlDataDir: /var/lib/pgsql/data/userdata
  #   auth:
  #     username: postgres
  #     database: backstage
  #     existingSecret: backstage-postgresql
  #     secretKeys:
  #       userPasswordKey: postgres-password
  #   image:
  #     registry: registry.redhat.io
  #     repository: rhel9/postgresql-13
  #     tag: 1-73
  #   primary:
  #     securityContext:
  #       enabled: false
  #     podSecurityContext:
  #       enabled: false
  #     containerSecurityContext:
  #       enabled: false
  #     persistence:
  #       enabled: true
  #       mountPath: /var/lib/pgsql/data
  #     extraEnvVars:
  #       - name: POSTGRESQL_ADMIN_PASSWORD
  #         valueFrom:
  #           secretKeyRef:
  #             key: postgres-password
  #             name: backstage-postgresql
  service:
    ports:
      backend: 4180
      targetPort: oauth2-proxy

route:
  enabled: true
  host: {{ ocp4_workload_redhat_developer_hub_backstage_host }}
  tls:
    enabled: true
    termination: "edge"

orchestrator:
  enabled: true
  serverlessLogicOperator:
    enabled: true
  serverlessOperator:
    enabled: true
  sonataflowPlatform:
    monitoring:
      enabled: true
    eventing:
      broker:
        name: ""
        namespace: ""
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    # -- Secret name for the user-created secret to connect an external DB
    externalDBsecretRef: ""
    # -- Name for the user-configured external Database
    externalDBName: ""
    # -- Host for the user-configured external Database
    externalDBHost: ""
    # -- Port for the user-configured external Database
    externalDBPort: ""
    # -- Image for the init container used by the create-db job
{% raw %}
    initContainerImage: "{{ .Values.upstream.postgresql.image.registry }}/{{ .Values.upstream.postgresql.image.repository }}:{{ .Values.upstream.postgresql.image.tag }}"
    # -- Image for the container used by the create-db job
    createDBJobImage: "{{ .Values.upstream.postgresql.image.registry }}/{{ .Values.upstream.postgresql.image.repository }}:{{ .Values.upstream.postgresql.image.tag }}"

  # -- Orchestrator plugins and their configuration
  plugins:
    - disabled: false
      package: "https://npm.registry.redhat.com/@redhat/backstage-plugin-orchestrator-backend-dynamic/-/backstage-plugin-orchestrator-backend-dynamic-1.7.1.tgz"
      integrity: sha512-9cXbedr0lC7ns7SNqARrWSQI4JGcZFw5xpfpUzA1tJaMMUjzAdPHTXqljf62/fs4hYBK8TJsWJ2KJkGVMzbrHQ==
      pluginConfig:
        orchestrator:
          dataIndexService:
            url: http://sonataflow-platform-data-index-service.{{ .Release.Namespace }}
    - disabled: false
      package: "https://npm.registry.redhat.com/@redhat/backstage-plugin-orchestrator/-/backstage-plugin-orchestrator-1.7.1.tgz"
      integrity: sha512-Cqu9EQwVQ4mpdgWTUA0MW89Gul0IklhvkkqVoO3CloQ1dnAj1XyXikCphzH5TmNDDd9K66dOpaKKCaW9KeJ4WA==
      pluginConfig:
        dynamicPlugins:
          frontend:
            red-hat-developer-hub.backstage-plugin-orchestrator:
              appIcons:
                - name: orchestratorIcon
                  importName: OrchestratorIcon
              dynamicRoutes:
                - path: /orchestrator
                  importName: OrchestratorPage
                  menuItem:
                    icon: orchestratorIcon
                    text: Orchestrator
              entityTabs:
                - path: /workflows
                  title: Workflows
                  mountPoint: entity.page.workflows
              mountPoints:
                - mountPoint: entity.page.workflows/cards
                  importName: OrchestratorCatalogTab
                  config:
                    layout:
                      gridColumn: "1 / -1"
                    if:
                      anyOf:
                        - IsOrchestratorCatalogTabAvailable
    - disabled: false
      package: "https://npm.registry.redhat.com/@redhat/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic/-/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic-1.7.1.tgz"
      integrity: sha512-J1sTjA5kj6DphG8D65go9KlpIfKyLN/wq+XlY5Cb5djEo8mvF3wn3Haf60OGFo5cP4OfRSWqFwT7LM5/dNVwAg==
      pluginConfig:
        orchestrator:
          dataIndexService:
            url: http://sonataflow-platform-data-index-service.{{ .Release.Namespace }}
    - disabled: false
      package: "https://npm.registry.redhat.com/@redhat/backstage-plugin-orchestrator-form-widgets/-/backstage-plugin-orchestrator-form-widgets-1.7.1.tgz"
      integrity: sha512-0KIXrZoJ+O4xNNzN/zB4+VMuaRPuiUviAmM+fIhTo/P9aLA36F9aIlyMbUbki49uaJ0zd8KXMBvmJSHZNrYkGQ==
      pluginConfig:
        dynamicPlugins:
          frontend:
            red-hat-developer-hub.backstage-plugin-orchestrator-form-widgets: {}
{% endraw %}
